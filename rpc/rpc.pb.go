// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Engine
	Info
	Empty
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Engine struct {
	Binary   string   `protobuf:"bytes,1,opt,name=binary" json:"binary,omitempty"`
	Replicas []string `protobuf:"bytes,2,rep,name=replicas" json:"replicas,omitempty"`
}

func (m *Engine) Reset()                    { *m = Engine{} }
func (m *Engine) String() string            { return proto.CompactTextString(m) }
func (*Engine) ProtoMessage()               {}
func (*Engine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Engine) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

func (m *Engine) GetReplicas() []string {
	if m != nil {
		return m.Replicas
	}
	return nil
}

type Info struct {
	Volume   string `protobuf:"bytes,1,opt,name=volume" json:"volume,omitempty"`
	Frontend string `protobuf:"bytes,2,opt,name=frontend" json:"frontend,omitempty"`
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint" json:"endpoint,omitempty"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Info) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func (m *Info) GetFrontend() string {
	if m != nil {
		return m.Frontend
	}
	return ""
}

func (m *Info) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Engine)(nil), "Engine")
	proto.RegisterType((*Info)(nil), "Info")
	proto.RegisterType((*Empty)(nil), "Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LonghornLauncherService service

type LonghornLauncherServiceClient interface {
	UpgradeEngine(ctx context.Context, in *Engine, opts ...grpc.CallOption) (*Empty, error)
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Info, error)
}

type longhornLauncherServiceClient struct {
	cc *grpc.ClientConn
}

func NewLonghornLauncherServiceClient(cc *grpc.ClientConn) LonghornLauncherServiceClient {
	return &longhornLauncherServiceClient{cc}
}

func (c *longhornLauncherServiceClient) UpgradeEngine(ctx context.Context, in *Engine, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/LonghornLauncherService/UpgradeEngine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornLauncherServiceClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := grpc.Invoke(ctx, "/LonghornLauncherService/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LonghornLauncherService service

type LonghornLauncherServiceServer interface {
	UpgradeEngine(context.Context, *Engine) (*Empty, error)
	GetInfo(context.Context, *Empty) (*Info, error)
}

func RegisterLonghornLauncherServiceServer(s *grpc.Server, srv LonghornLauncherServiceServer) {
	s.RegisterService(&_LonghornLauncherService_serviceDesc, srv)
}

func _LonghornLauncherService_UpgradeEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Engine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornLauncherServiceServer).UpgradeEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornLauncherService/UpgradeEngine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornLauncherServiceServer).UpgradeEngine(ctx, req.(*Engine))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornLauncherService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornLauncherServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornLauncherService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornLauncherServiceServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _LonghornLauncherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LonghornLauncherService",
	HandlerType: (*LonghornLauncherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpgradeEngine",
			Handler:    _LonghornLauncherService_UpgradeEngine_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _LonghornLauncherService_GetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0x3d, 0x6b, 0xc3, 0x30,
	0x10, 0x40, 0xf3, 0xd1, 0xd8, 0xf5, 0x41, 0x17, 0x0f, 0xad, 0xd0, 0x14, 0x34, 0x65, 0xd2, 0xd0,
	0xae, 0x5d, 0x43, 0x29, 0x64, 0x4a, 0x69, 0xa1, 0xa3, 0x22, 0x5f, 0x1c, 0x41, 0x72, 0x27, 0xae,
	0x4a, 0x20, 0xff, 0xbe, 0x48, 0x76, 0xb2, 0xe9, 0xe9, 0xf1, 0xe0, 0xee, 0xa0, 0x91, 0xe8, 0x6d,
	0x14, 0x4e, 0x6c, 0xde, 0xa1, 0x5a, 0x53, 0x1f, 0x08, 0xdb, 0x67, 0xa8, 0x76, 0x81, 0x9c, 0x5c,
	0xd5, 0x74, 0x39, 0x5d, 0x35, 0xdb, 0x91, 0x5a, 0x0d, 0x8f, 0x82, 0xf1, 0x18, 0xbc, 0xfb, 0x53,
	0xb3, 0xe5, 0x7c, 0xd5, 0x6c, 0xef, 0x6c, 0x7e, 0xe0, 0xe1, 0x93, 0xf6, 0x9c, 0xdb, 0x0b, 0x1f,
	0xcf, 0x27, 0xbc, 0xb5, 0x03, 0xe5, 0x76, 0x2f, 0x4c, 0x09, 0xa9, 0x53, 0xb3, 0x62, 0xee, 0x9c,
	0x1d, 0x52, 0x17, 0x39, 0x50, 0x52, 0xf3, 0xc1, 0xdd, 0xd8, 0xd4, 0xb0, 0x58, 0x9f, 0x62, 0xba,
	0xbe, 0xfe, 0xc2, 0xcb, 0x86, 0xa9, 0x3f, 0xb0, 0xd0, 0xc6, 0x9d, 0xc9, 0x1f, 0x50, 0xbe, 0x50,
	0x2e, 0xc1, 0x63, 0x6b, 0xe0, 0xe9, 0x3b, 0xf6, 0xe2, 0x3a, 0x1c, 0x17, 0xa8, 0xed, 0xf0, 0xd0,
	0x95, 0x2d, 0xb1, 0x99, 0xb4, 0x1a, 0xea, 0x0f, 0x4c, 0x65, 0xc4, 0xf1, 0x53, 0x2f, 0x6c, 0x46,
	0x33, 0xd9, 0x55, 0xe5, 0x00, 0x6f, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xeb, 0xbb, 0x8c, 0xc5,
	0x0d, 0x01, 0x00, 0x00,
}
