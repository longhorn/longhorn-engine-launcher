// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Engine
	Info
	Identity
	Frontend
	Empty
	EngineSpec
	EngineStatus
	EngineStartRequest
	EngineStopRequest
	EngineGetRequest
	EngineResponse
	EngineListRequest
	EngineListResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Engine struct {
	Binary   string   `protobuf:"bytes,1,opt,name=binary" json:"binary,omitempty"`
	Replicas []string `protobuf:"bytes,2,rep,name=replicas" json:"replicas,omitempty"`
}

func (m *Engine) Reset()                    { *m = Engine{} }
func (m *Engine) String() string            { return proto.CompactTextString(m) }
func (*Engine) ProtoMessage()               {}
func (*Engine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Engine) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

func (m *Engine) GetReplicas() []string {
	if m != nil {
		return m.Replicas
	}
	return nil
}

type Info struct {
	Volume   string `protobuf:"bytes,1,opt,name=volume" json:"volume,omitempty"`
	Frontend string `protobuf:"bytes,2,opt,name=frontend" json:"frontend,omitempty"`
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint" json:"endpoint,omitempty"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Info) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func (m *Info) GetFrontend() string {
	if m != nil {
		return m.Frontend
	}
	return ""
}

func (m *Info) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

type Identity struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *Identity) Reset()                    { *m = Identity{} }
func (m *Identity) String() string            { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()               {}
func (*Identity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Identity) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Frontend struct {
	Frontend string `protobuf:"bytes,1,opt,name=Frontend" json:"Frontend,omitempty"`
}

func (m *Frontend) Reset()                    { *m = Frontend{} }
func (m *Frontend) String() string            { return proto.CompactTextString(m) }
func (*Frontend) ProtoMessage()               {}
func (*Frontend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Frontend) GetFrontend() string {
	if m != nil {
		return m.Frontend
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type EngineSpec struct {
	Name          string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Binary        string   `protobuf:"bytes,2,opt,name=binary" json:"binary,omitempty"`
	Args          []string `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	ReservedPorts []int32  `protobuf:"varint,4,rep,packed,name=reserved_ports,json=reservedPorts" json:"reserved_ports,omitempty"`
}

func (m *EngineSpec) Reset()                    { *m = EngineSpec{} }
func (m *EngineSpec) String() string            { return proto.CompactTextString(m) }
func (*EngineSpec) ProtoMessage()               {}
func (*EngineSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EngineSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EngineSpec) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

func (m *EngineSpec) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *EngineSpec) GetReservedPorts() []int32 {
	if m != nil {
		return m.ReservedPorts
	}
	return nil
}

type EngineStatus struct {
	Status   string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
}

func (m *EngineStatus) Reset()                    { *m = EngineStatus{} }
func (m *EngineStatus) String() string            { return proto.CompactTextString(m) }
func (*EngineStatus) ProtoMessage()               {}
func (*EngineStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EngineStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *EngineStatus) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type EngineStartRequest struct {
	Spec *EngineSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
}

func (m *EngineStartRequest) Reset()                    { *m = EngineStartRequest{} }
func (m *EngineStartRequest) String() string            { return proto.CompactTextString(m) }
func (*EngineStartRequest) ProtoMessage()               {}
func (*EngineStartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *EngineStartRequest) GetSpec() *EngineSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type EngineStopRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *EngineStopRequest) Reset()                    { *m = EngineStopRequest{} }
func (m *EngineStopRequest) String() string            { return proto.CompactTextString(m) }
func (*EngineStopRequest) ProtoMessage()               {}
func (*EngineStopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *EngineStopRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EngineGetRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *EngineGetRequest) Reset()                    { *m = EngineGetRequest{} }
func (m *EngineGetRequest) String() string            { return proto.CompactTextString(m) }
func (*EngineGetRequest) ProtoMessage()               {}
func (*EngineGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *EngineGetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EngineResponse struct {
	Spec   *EngineSpec   `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Status *EngineStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *EngineResponse) Reset()                    { *m = EngineResponse{} }
func (m *EngineResponse) String() string            { return proto.CompactTextString(m) }
func (*EngineResponse) ProtoMessage()               {}
func (*EngineResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *EngineResponse) GetSpec() *EngineSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *EngineResponse) GetStatus() *EngineStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type EngineListRequest struct {
}

func (m *EngineListRequest) Reset()                    { *m = EngineListRequest{} }
func (m *EngineListRequest) String() string            { return proto.CompactTextString(m) }
func (*EngineListRequest) ProtoMessage()               {}
func (*EngineListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type EngineListResponse struct {
	Engines []*EngineResponse `protobuf:"bytes,1,rep,name=engines" json:"engines,omitempty"`
}

func (m *EngineListResponse) Reset()                    { *m = EngineListResponse{} }
func (m *EngineListResponse) String() string            { return proto.CompactTextString(m) }
func (*EngineListResponse) ProtoMessage()               {}
func (*EngineListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *EngineListResponse) GetEngines() []*EngineResponse {
	if m != nil {
		return m.Engines
	}
	return nil
}

func init() {
	proto.RegisterType((*Engine)(nil), "Engine")
	proto.RegisterType((*Info)(nil), "Info")
	proto.RegisterType((*Identity)(nil), "Identity")
	proto.RegisterType((*Frontend)(nil), "Frontend")
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*EngineSpec)(nil), "EngineSpec")
	proto.RegisterType((*EngineStatus)(nil), "EngineStatus")
	proto.RegisterType((*EngineStartRequest)(nil), "EngineStartRequest")
	proto.RegisterType((*EngineStopRequest)(nil), "EngineStopRequest")
	proto.RegisterType((*EngineGetRequest)(nil), "EngineGetRequest")
	proto.RegisterType((*EngineResponse)(nil), "EngineResponse")
	proto.RegisterType((*EngineListRequest)(nil), "EngineListRequest")
	proto.RegisterType((*EngineListResponse)(nil), "EngineListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LonghornLauncherService service

type LonghornLauncherServiceClient interface {
	UpgradeEngine(ctx context.Context, in *Engine, opts ...grpc.CallOption) (*Empty, error)
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Info, error)
	StartFrontend(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error)
	ShutdownFrontend(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error)
	StartEngineFrontend(ctx context.Context, in *Frontend, opts ...grpc.CallOption) (*Empty, error)
	ShutdownEngineFrontend(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type longhornLauncherServiceClient struct {
	cc *grpc.ClientConn
}

func NewLonghornLauncherServiceClient(cc *grpc.ClientConn) LonghornLauncherServiceClient {
	return &longhornLauncherServiceClient{cc}
}

func (c *longhornLauncherServiceClient) UpgradeEngine(ctx context.Context, in *Engine, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/LonghornLauncherService/UpgradeEngine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornLauncherServiceClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := grpc.Invoke(ctx, "/LonghornLauncherService/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornLauncherServiceClient) StartFrontend(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/LonghornLauncherService/StartFrontend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornLauncherServiceClient) ShutdownFrontend(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/LonghornLauncherService/ShutdownFrontend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornLauncherServiceClient) StartEngineFrontend(ctx context.Context, in *Frontend, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/LonghornLauncherService/StartEngineFrontend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornLauncherServiceClient) ShutdownEngineFrontend(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/LonghornLauncherService/ShutdownEngineFrontend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LonghornLauncherService service

type LonghornLauncherServiceServer interface {
	UpgradeEngine(context.Context, *Engine) (*Empty, error)
	GetInfo(context.Context, *Empty) (*Info, error)
	StartFrontend(context.Context, *Identity) (*Empty, error)
	ShutdownFrontend(context.Context, *Identity) (*Empty, error)
	StartEngineFrontend(context.Context, *Frontend) (*Empty, error)
	ShutdownEngineFrontend(context.Context, *Empty) (*Empty, error)
}

func RegisterLonghornLauncherServiceServer(s *grpc.Server, srv LonghornLauncherServiceServer) {
	s.RegisterService(&_LonghornLauncherService_serviceDesc, srv)
}

func _LonghornLauncherService_UpgradeEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Engine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornLauncherServiceServer).UpgradeEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornLauncherService/UpgradeEngine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornLauncherServiceServer).UpgradeEngine(ctx, req.(*Engine))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornLauncherService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornLauncherServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornLauncherService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornLauncherServiceServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornLauncherService_StartFrontend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornLauncherServiceServer).StartFrontend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornLauncherService/StartFrontend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornLauncherServiceServer).StartFrontend(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornLauncherService_ShutdownFrontend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornLauncherServiceServer).ShutdownFrontend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornLauncherService/ShutdownFrontend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornLauncherServiceServer).ShutdownFrontend(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornLauncherService_StartEngineFrontend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Frontend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornLauncherServiceServer).StartEngineFrontend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornLauncherService/StartEngineFrontend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornLauncherServiceServer).StartEngineFrontend(ctx, req.(*Frontend))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornLauncherService_ShutdownEngineFrontend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornLauncherServiceServer).ShutdownEngineFrontend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornLauncherService/ShutdownEngineFrontend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornLauncherServiceServer).ShutdownEngineFrontend(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _LonghornLauncherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LonghornLauncherService",
	HandlerType: (*LonghornLauncherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpgradeEngine",
			Handler:    _LonghornLauncherService_UpgradeEngine_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _LonghornLauncherService_GetInfo_Handler,
		},
		{
			MethodName: "StartFrontend",
			Handler:    _LonghornLauncherService_StartFrontend_Handler,
		},
		{
			MethodName: "ShutdownFrontend",
			Handler:    _LonghornLauncherService_ShutdownFrontend_Handler,
		},
		{
			MethodName: "StartEngineFrontend",
			Handler:    _LonghornLauncherService_StartEngineFrontend_Handler,
		},
		{
			MethodName: "ShutdownEngineFrontend",
			Handler:    _LonghornLauncherService_ShutdownEngineFrontend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for LonghornEngineLauncherService service

type LonghornEngineLauncherServiceClient interface {
	EngineStart(ctx context.Context, in *EngineStartRequest, opts ...grpc.CallOption) (*EngineResponse, error)
	EngineStop(ctx context.Context, in *EngineStopRequest, opts ...grpc.CallOption) (*EngineResponse, error)
	EngineGet(ctx context.Context, in *EngineGetRequest, opts ...grpc.CallOption) (*EngineResponse, error)
	EngineList(ctx context.Context, in *EngineListRequest, opts ...grpc.CallOption) (*EngineListResponse, error)
}

type longhornEngineLauncherServiceClient struct {
	cc *grpc.ClientConn
}

func NewLonghornEngineLauncherServiceClient(cc *grpc.ClientConn) LonghornEngineLauncherServiceClient {
	return &longhornEngineLauncherServiceClient{cc}
}

func (c *longhornEngineLauncherServiceClient) EngineStart(ctx context.Context, in *EngineStartRequest, opts ...grpc.CallOption) (*EngineResponse, error) {
	out := new(EngineResponse)
	err := grpc.Invoke(ctx, "/LonghornEngineLauncherService/EngineStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornEngineLauncherServiceClient) EngineStop(ctx context.Context, in *EngineStopRequest, opts ...grpc.CallOption) (*EngineResponse, error) {
	out := new(EngineResponse)
	err := grpc.Invoke(ctx, "/LonghornEngineLauncherService/EngineStop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornEngineLauncherServiceClient) EngineGet(ctx context.Context, in *EngineGetRequest, opts ...grpc.CallOption) (*EngineResponse, error) {
	out := new(EngineResponse)
	err := grpc.Invoke(ctx, "/LonghornEngineLauncherService/EngineGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornEngineLauncherServiceClient) EngineList(ctx context.Context, in *EngineListRequest, opts ...grpc.CallOption) (*EngineListResponse, error) {
	out := new(EngineListResponse)
	err := grpc.Invoke(ctx, "/LonghornEngineLauncherService/EngineList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LonghornEngineLauncherService service

type LonghornEngineLauncherServiceServer interface {
	EngineStart(context.Context, *EngineStartRequest) (*EngineResponse, error)
	EngineStop(context.Context, *EngineStopRequest) (*EngineResponse, error)
	EngineGet(context.Context, *EngineGetRequest) (*EngineResponse, error)
	EngineList(context.Context, *EngineListRequest) (*EngineListResponse, error)
}

func RegisterLonghornEngineLauncherServiceServer(s *grpc.Server, srv LonghornEngineLauncherServiceServer) {
	s.RegisterService(&_LonghornEngineLauncherService_serviceDesc, srv)
}

func _LonghornEngineLauncherService_EngineStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornEngineLauncherServiceServer).EngineStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornEngineLauncherService/EngineStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornEngineLauncherServiceServer).EngineStart(ctx, req.(*EngineStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornEngineLauncherService_EngineStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornEngineLauncherServiceServer).EngineStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornEngineLauncherService/EngineStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornEngineLauncherServiceServer).EngineStop(ctx, req.(*EngineStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornEngineLauncherService_EngineGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornEngineLauncherServiceServer).EngineGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornEngineLauncherService/EngineGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornEngineLauncherServiceServer).EngineGet(ctx, req.(*EngineGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornEngineLauncherService_EngineList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EngineListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornEngineLauncherServiceServer).EngineList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornEngineLauncherService/EngineList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornEngineLauncherServiceServer).EngineList(ctx, req.(*EngineListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LonghornEngineLauncherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LonghornEngineLauncherService",
	HandlerType: (*LonghornEngineLauncherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EngineStart",
			Handler:    _LonghornEngineLauncherService_EngineStart_Handler,
		},
		{
			MethodName: "EngineStop",
			Handler:    _LonghornEngineLauncherService_EngineStop_Handler,
		},
		{
			MethodName: "EngineGet",
			Handler:    _LonghornEngineLauncherService_EngineGet_Handler,
		},
		{
			MethodName: "EngineList",
			Handler:    _LonghornEngineLauncherService_EngineList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6b, 0xdb, 0x4e,
	0x10, 0x75, 0x64, 0xc7, 0x8e, 0xc6, 0x3f, 0xfb, 0x97, 0xac, 0x21, 0x15, 0x2a, 0xa5, 0x66, 0x69,
	0x12, 0xb7, 0x07, 0x41, 0x1d, 0x42, 0x2f, 0x85, 0x1e, 0x9a, 0x34, 0x18, 0x5c, 0x28, 0x32, 0x2d,
	0xbd, 0x05, 0x45, 0x9a, 0xc8, 0x82, 0x78, 0x77, 0xbb, 0xbb, 0x76, 0xf1, 0xad, 0xff, 0x75, 0xaf,
	0x45, 0x2b, 0xad, 0x2a, 0x7f, 0x90, 0xde, 0x76, 0x66, 0xde, 0x7c, 0xbc, 0xe7, 0x67, 0x81, 0x2b,
	0x45, 0x1c, 0x08, 0xc9, 0x35, 0xa7, 0xef, 0xa1, 0x7d, 0xc3, 0xd2, 0x8c, 0x21, 0x39, 0x85, 0xf6,
	0x7d, 0xc6, 0x22, 0xb9, 0xf6, 0x0e, 0x86, 0x07, 0x23, 0x37, 0x2c, 0x23, 0xe2, 0xc3, 0x91, 0x44,
	0xf1, 0x98, 0xc5, 0x91, 0xf2, 0x9c, 0x61, 0x73, 0xe4, 0x86, 0x55, 0x4c, 0xbf, 0x41, 0x6b, 0xc2,
	0x1e, 0x78, 0xde, 0xbb, 0xe2, 0x8f, 0xcb, 0x05, 0xda, 0xde, 0x22, 0xca, 0x7b, 0x1f, 0x24, 0x67,
	0x1a, 0x59, 0xe2, 0x39, 0xa6, 0x52, 0xc5, 0x79, 0x0d, 0x59, 0x22, 0x78, 0xc6, 0xb4, 0xd7, 0x2c,
	0x6a, 0x36, 0xa6, 0x3e, 0x1c, 0x4d, 0x12, 0x64, 0x3a, 0xd3, 0x6b, 0xd2, 0x07, 0x67, 0x72, 0x5d,
	0xce, 0x75, 0x26, 0xd7, 0xf4, 0x1c, 0x8e, 0x3e, 0xd5, 0x66, 0xd8, 0x77, 0x89, 0xa8, 0x62, 0xda,
	0x81, 0xc3, 0x9b, 0x85, 0xd0, 0x6b, 0xaa, 0x00, 0x0a, 0x8a, 0x33, 0x81, 0x31, 0x21, 0xd0, 0x62,
	0x51, 0x75, 0xa8, 0x79, 0xd7, 0xa8, 0x3b, 0x1b, 0xd4, 0x09, 0xb4, 0x22, 0x99, 0x2a, 0xaf, 0x69,
	0x68, 0x9b, 0x37, 0x39, 0x83, 0xbe, 0x44, 0x85, 0x72, 0x85, 0xc9, 0x9d, 0xe0, 0x52, 0x2b, 0xaf,
	0x35, 0x6c, 0x8e, 0x0e, 0xc3, 0x9e, 0xcd, 0x7e, 0xc9, 0x93, 0xf4, 0x23, 0xfc, 0x57, 0x2e, 0xd5,
	0x91, 0x5e, 0xaa, 0x7c, 0x85, 0x32, 0x2f, 0xab, 0x50, 0x11, 0x91, 0xe7, 0xe0, 0xa2, 0x94, 0x5c,
	0xde, 0x2d, 0x54, 0x6a, 0x25, 0x32, 0x89, 0xcf, 0x2a, 0xa5, 0x57, 0x40, 0xaa, 0x21, 0x52, 0x87,
	0xf8, 0x63, 0x89, 0x4a, 0x93, 0x97, 0xd0, 0x52, 0x02, 0x63, 0x33, 0xa8, 0x3b, 0xee, 0x06, 0x7f,
	0xc9, 0x85, 0xa6, 0x40, 0x2f, 0xe0, 0xc4, 0xb6, 0x71, 0x61, 0xbb, 0xf6, 0xf0, 0xa6, 0xe7, 0x70,
	0x5c, 0x00, 0x6f, 0x51, 0x3f, 0x85, 0xfb, 0x0e, 0xfd, 0x02, 0x17, 0xa2, 0x12, 0x9c, 0x29, 0xfc,
	0xe7, 0x0d, 0xe4, 0xac, 0xe2, 0xeb, 0x18, 0x48, 0x2f, 0xa8, 0xcb, 0x61, 0xe9, 0xd3, 0x81, 0x3d,
	0x75, 0x9a, 0x29, 0x7b, 0x02, 0xfd, 0x60, 0x69, 0x17, 0xc9, 0x72, 0xe5, 0x6b, 0xe8, 0xa0, 0xc9,
	0xe6, 0x12, 0x36, 0x47, 0xdd, 0xf1, 0xff, 0xc1, 0xe6, 0x51, 0xa1, 0xad, 0x8f, 0x7f, 0x39, 0xf0,
	0x6c, 0xca, 0x59, 0x3a, 0xe7, 0x92, 0x4d, 0xa3, 0x25, 0x8b, 0xe7, 0x28, 0x67, 0x28, 0x57, 0x59,
	0x8c, 0x84, 0x42, 0xef, 0xab, 0x48, 0x65, 0x94, 0x60, 0xe9, 0xfb, 0x4e, 0x39, 0xc6, 0x6f, 0x07,
	0x85, 0x5f, 0x1a, 0xc4, 0x87, 0xce, 0x2d, 0x6a, 0xe3, 0xec, 0x32, 0xe9, 0x1f, 0x06, 0x79, 0x48,
	0x1b, 0xe4, 0x15, 0xf4, 0xcc, 0xaf, 0x51, 0x79, 0xd0, 0x0d, 0xac, 0x55, 0x6b, 0x13, 0x2e, 0xe0,
	0x78, 0x36, 0x5f, 0xea, 0x84, 0xff, 0x64, 0x4f, 0x03, 0xdf, 0xc0, 0xc0, 0x8c, 0x2b, 0x6e, 0xa8,
	0x61, 0xed, 0x73, 0x03, 0x7b, 0x6a, 0x87, 0x6e, 0xc1, 0xed, 0x95, 0x15, 0x76, 0xfc, 0xfb, 0x00,
	0x5e, 0x58, 0x09, 0x4a, 0x31, 0xb7, 0x84, 0xb8, 0x82, 0x6e, 0xcd, 0x5c, 0x64, 0x10, 0xec, 0x5a,
	0xcd, 0xdf, 0x96, 0x98, 0x36, 0xc8, 0x65, 0xf5, 0x6f, 0xd2, 0x5c, 0x10, 0x12, 0xec, 0x38, 0x6d,
	0x5f, 0xd3, 0x5b, 0x70, 0x2b, 0xa3, 0x91, 0x93, 0x60, 0xdb, 0x74, 0xfb, 0x5a, 0xde, 0xd9, 0x3d,
	0xb9, 0x09, 0xaa, 0x3d, 0x35, 0x9b, 0xf8, 0x83, 0x60, 0xd7, 0x25, 0xb4, 0x71, 0xdf, 0x36, 0x1f,
	0xb6, 0xcb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x29, 0x32, 0x6a, 0xf7, 0xe5, 0x04, 0x00, 0x00,
}
