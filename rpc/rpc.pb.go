// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Engine
	Info
	Identity
	Frontend
	Empty
	ProcessSpec
	ProcessStatus
	ProcessCreateRequest
	ProcessDeleteRequest
	ProcessGetRequest
	ProcessResponse
	ProcessListRequest
	ProcessListResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Engine struct {
	Binary   string   `protobuf:"bytes,1,opt,name=binary" json:"binary,omitempty"`
	Replicas []string `protobuf:"bytes,2,rep,name=replicas" json:"replicas,omitempty"`
}

func (m *Engine) Reset()                    { *m = Engine{} }
func (m *Engine) String() string            { return proto.CompactTextString(m) }
func (*Engine) ProtoMessage()               {}
func (*Engine) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Engine) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

func (m *Engine) GetReplicas() []string {
	if m != nil {
		return m.Replicas
	}
	return nil
}

type Info struct {
	Volume   string `protobuf:"bytes,1,opt,name=volume" json:"volume,omitempty"`
	Frontend string `protobuf:"bytes,2,opt,name=frontend" json:"frontend,omitempty"`
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint" json:"endpoint,omitempty"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Info) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func (m *Info) GetFrontend() string {
	if m != nil {
		return m.Frontend
	}
	return ""
}

func (m *Info) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

type Identity struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *Identity) Reset()                    { *m = Identity{} }
func (m *Identity) String() string            { return proto.CompactTextString(m) }
func (*Identity) ProtoMessage()               {}
func (*Identity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Identity) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type Frontend struct {
	Frontend string `protobuf:"bytes,1,opt,name=Frontend" json:"Frontend,omitempty"`
}

func (m *Frontend) Reset()                    { *m = Frontend{} }
func (m *Frontend) String() string            { return proto.CompactTextString(m) }
func (*Frontend) ProtoMessage()               {}
func (*Frontend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Frontend) GetFrontend() string {
	if m != nil {
		return m.Frontend
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ProcessSpec struct {
	Name          string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Binary        string   `protobuf:"bytes,2,opt,name=binary" json:"binary,omitempty"`
	Args          []string `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	ReservedPorts []int32  `protobuf:"varint,4,rep,packed,name=reserved_ports,json=reservedPorts" json:"reserved_ports,omitempty"`
}

func (m *ProcessSpec) Reset()                    { *m = ProcessSpec{} }
func (m *ProcessSpec) String() string            { return proto.CompactTextString(m) }
func (*ProcessSpec) ProtoMessage()               {}
func (*ProcessSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ProcessSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProcessSpec) GetBinary() string {
	if m != nil {
		return m.Binary
	}
	return ""
}

func (m *ProcessSpec) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ProcessSpec) GetReservedPorts() []int32 {
	if m != nil {
		return m.ReservedPorts
	}
	return nil
}

type ProcessStatus struct {
	Status   string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	ErrorMsg string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
}

func (m *ProcessStatus) Reset()                    { *m = ProcessStatus{} }
func (m *ProcessStatus) String() string            { return proto.CompactTextString(m) }
func (*ProcessStatus) ProtoMessage()               {}
func (*ProcessStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ProcessStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ProcessStatus) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type ProcessCreateRequest struct {
	Spec *ProcessSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
}

func (m *ProcessCreateRequest) Reset()                    { *m = ProcessCreateRequest{} }
func (m *ProcessCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*ProcessCreateRequest) ProtoMessage()               {}
func (*ProcessCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ProcessCreateRequest) GetSpec() *ProcessSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type ProcessDeleteRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ProcessDeleteRequest) Reset()                    { *m = ProcessDeleteRequest{} }
func (m *ProcessDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*ProcessDeleteRequest) ProtoMessage()               {}
func (*ProcessDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ProcessDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ProcessGetRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ProcessGetRequest) Reset()                    { *m = ProcessGetRequest{} }
func (m *ProcessGetRequest) String() string            { return proto.CompactTextString(m) }
func (*ProcessGetRequest) ProtoMessage()               {}
func (*ProcessGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ProcessGetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ProcessResponse struct {
	Spec   *ProcessSpec   `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Status *ProcessStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *ProcessResponse) Reset()                    { *m = ProcessResponse{} }
func (m *ProcessResponse) String() string            { return proto.CompactTextString(m) }
func (*ProcessResponse) ProtoMessage()               {}
func (*ProcessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ProcessResponse) GetSpec() *ProcessSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ProcessResponse) GetStatus() *ProcessStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ProcessListRequest struct {
}

func (m *ProcessListRequest) Reset()                    { *m = ProcessListRequest{} }
func (m *ProcessListRequest) String() string            { return proto.CompactTextString(m) }
func (*ProcessListRequest) ProtoMessage()               {}
func (*ProcessListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type ProcessListResponse struct {
	Processes map[string]*ProcessResponse `protobuf:"bytes,1,rep,name=processes" json:"processes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ProcessListResponse) Reset()                    { *m = ProcessListResponse{} }
func (m *ProcessListResponse) String() string            { return proto.CompactTextString(m) }
func (*ProcessListResponse) ProtoMessage()               {}
func (*ProcessListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ProcessListResponse) GetProcesses() map[string]*ProcessResponse {
	if m != nil {
		return m.Processes
	}
	return nil
}

func init() {
	proto.RegisterType((*Engine)(nil), "Engine")
	proto.RegisterType((*Info)(nil), "Info")
	proto.RegisterType((*Identity)(nil), "Identity")
	proto.RegisterType((*Frontend)(nil), "Frontend")
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*ProcessSpec)(nil), "ProcessSpec")
	proto.RegisterType((*ProcessStatus)(nil), "ProcessStatus")
	proto.RegisterType((*ProcessCreateRequest)(nil), "ProcessCreateRequest")
	proto.RegisterType((*ProcessDeleteRequest)(nil), "ProcessDeleteRequest")
	proto.RegisterType((*ProcessGetRequest)(nil), "ProcessGetRequest")
	proto.RegisterType((*ProcessResponse)(nil), "ProcessResponse")
	proto.RegisterType((*ProcessListRequest)(nil), "ProcessListRequest")
	proto.RegisterType((*ProcessListResponse)(nil), "ProcessListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LonghornLauncherService service

type LonghornLauncherServiceClient interface {
	UpgradeEngine(ctx context.Context, in *Engine, opts ...grpc.CallOption) (*Empty, error)
	GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Info, error)
	StartFrontend(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error)
	ShutdownFrontend(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error)
	StartEngineFrontend(ctx context.Context, in *Frontend, opts ...grpc.CallOption) (*Empty, error)
	ShutdownEngineFrontend(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type longhornLauncherServiceClient struct {
	cc *grpc.ClientConn
}

func NewLonghornLauncherServiceClient(cc *grpc.ClientConn) LonghornLauncherServiceClient {
	return &longhornLauncherServiceClient{cc}
}

func (c *longhornLauncherServiceClient) UpgradeEngine(ctx context.Context, in *Engine, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/LonghornLauncherService/UpgradeEngine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornLauncherServiceClient) GetInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := grpc.Invoke(ctx, "/LonghornLauncherService/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornLauncherServiceClient) StartFrontend(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/LonghornLauncherService/StartFrontend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornLauncherServiceClient) ShutdownFrontend(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/LonghornLauncherService/ShutdownFrontend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornLauncherServiceClient) StartEngineFrontend(ctx context.Context, in *Frontend, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/LonghornLauncherService/StartEngineFrontend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornLauncherServiceClient) ShutdownEngineFrontend(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/LonghornLauncherService/ShutdownEngineFrontend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LonghornLauncherService service

type LonghornLauncherServiceServer interface {
	UpgradeEngine(context.Context, *Engine) (*Empty, error)
	GetInfo(context.Context, *Empty) (*Info, error)
	StartFrontend(context.Context, *Identity) (*Empty, error)
	ShutdownFrontend(context.Context, *Identity) (*Empty, error)
	StartEngineFrontend(context.Context, *Frontend) (*Empty, error)
	ShutdownEngineFrontend(context.Context, *Empty) (*Empty, error)
}

func RegisterLonghornLauncherServiceServer(s *grpc.Server, srv LonghornLauncherServiceServer) {
	s.RegisterService(&_LonghornLauncherService_serviceDesc, srv)
}

func _LonghornLauncherService_UpgradeEngine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Engine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornLauncherServiceServer).UpgradeEngine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornLauncherService/UpgradeEngine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornLauncherServiceServer).UpgradeEngine(ctx, req.(*Engine))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornLauncherService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornLauncherServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornLauncherService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornLauncherServiceServer).GetInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornLauncherService_StartFrontend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornLauncherServiceServer).StartFrontend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornLauncherService/StartFrontend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornLauncherServiceServer).StartFrontend(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornLauncherService_ShutdownFrontend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornLauncherServiceServer).ShutdownFrontend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornLauncherService/ShutdownFrontend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornLauncherServiceServer).ShutdownFrontend(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornLauncherService_StartEngineFrontend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Frontend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornLauncherServiceServer).StartEngineFrontend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornLauncherService/StartEngineFrontend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornLauncherServiceServer).StartEngineFrontend(ctx, req.(*Frontend))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornLauncherService_ShutdownEngineFrontend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornLauncherServiceServer).ShutdownEngineFrontend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornLauncherService/ShutdownEngineFrontend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornLauncherServiceServer).ShutdownEngineFrontend(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _LonghornLauncherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LonghornLauncherService",
	HandlerType: (*LonghornLauncherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpgradeEngine",
			Handler:    _LonghornLauncherService_UpgradeEngine_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _LonghornLauncherService_GetInfo_Handler,
		},
		{
			MethodName: "StartFrontend",
			Handler:    _LonghornLauncherService_StartFrontend_Handler,
		},
		{
			MethodName: "ShutdownFrontend",
			Handler:    _LonghornLauncherService_ShutdownFrontend_Handler,
		},
		{
			MethodName: "StartEngineFrontend",
			Handler:    _LonghornLauncherService_StartEngineFrontend_Handler,
		},
		{
			MethodName: "ShutdownEngineFrontend",
			Handler:    _LonghornLauncherService_ShutdownEngineFrontend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for LonghornProcessLauncherService service

type LonghornProcessLauncherServiceClient interface {
	ProcessCreate(ctx context.Context, in *ProcessCreateRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
	ProcessDelete(ctx context.Context, in *ProcessDeleteRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
	ProcessGet(ctx context.Context, in *ProcessGetRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
	ProcessList(ctx context.Context, in *ProcessListRequest, opts ...grpc.CallOption) (*ProcessListResponse, error)
}

type longhornProcessLauncherServiceClient struct {
	cc *grpc.ClientConn
}

func NewLonghornProcessLauncherServiceClient(cc *grpc.ClientConn) LonghornProcessLauncherServiceClient {
	return &longhornProcessLauncherServiceClient{cc}
}

func (c *longhornProcessLauncherServiceClient) ProcessCreate(ctx context.Context, in *ProcessCreateRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := grpc.Invoke(ctx, "/LonghornProcessLauncherService/ProcessCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornProcessLauncherServiceClient) ProcessDelete(ctx context.Context, in *ProcessDeleteRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := grpc.Invoke(ctx, "/LonghornProcessLauncherService/ProcessDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornProcessLauncherServiceClient) ProcessGet(ctx context.Context, in *ProcessGetRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := grpc.Invoke(ctx, "/LonghornProcessLauncherService/ProcessGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *longhornProcessLauncherServiceClient) ProcessList(ctx context.Context, in *ProcessListRequest, opts ...grpc.CallOption) (*ProcessListResponse, error) {
	out := new(ProcessListResponse)
	err := grpc.Invoke(ctx, "/LonghornProcessLauncherService/ProcessList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LonghornProcessLauncherService service

type LonghornProcessLauncherServiceServer interface {
	ProcessCreate(context.Context, *ProcessCreateRequest) (*ProcessResponse, error)
	ProcessDelete(context.Context, *ProcessDeleteRequest) (*ProcessResponse, error)
	ProcessGet(context.Context, *ProcessGetRequest) (*ProcessResponse, error)
	ProcessList(context.Context, *ProcessListRequest) (*ProcessListResponse, error)
}

func RegisterLonghornProcessLauncherServiceServer(s *grpc.Server, srv LonghornProcessLauncherServiceServer) {
	s.RegisterService(&_LonghornProcessLauncherService_serviceDesc, srv)
}

func _LonghornProcessLauncherService_ProcessCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornProcessLauncherServiceServer).ProcessCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornProcessLauncherService/ProcessCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornProcessLauncherServiceServer).ProcessCreate(ctx, req.(*ProcessCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornProcessLauncherService_ProcessDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornProcessLauncherServiceServer).ProcessDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornProcessLauncherService/ProcessDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornProcessLauncherServiceServer).ProcessDelete(ctx, req.(*ProcessDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornProcessLauncherService_ProcessGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornProcessLauncherServiceServer).ProcessGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornProcessLauncherService/ProcessGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornProcessLauncherServiceServer).ProcessGet(ctx, req.(*ProcessGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LonghornProcessLauncherService_ProcessList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LonghornProcessLauncherServiceServer).ProcessList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LonghornProcessLauncherService/ProcessList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LonghornProcessLauncherServiceServer).ProcessList(ctx, req.(*ProcessListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LonghornProcessLauncherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LonghornProcessLauncherService",
	HandlerType: (*LonghornProcessLauncherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessCreate",
			Handler:    _LonghornProcessLauncherService_ProcessCreate_Handler,
		},
		{
			MethodName: "ProcessDelete",
			Handler:    _LonghornProcessLauncherService_ProcessDelete_Handler,
		},
		{
			MethodName: "ProcessGet",
			Handler:    _LonghornProcessLauncherService_ProcessGet_Handler,
		},
		{
			MethodName: "ProcessList",
			Handler:    _LonghornProcessLauncherService_ProcessList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 609 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x4d, 0x9c, 0x8f, 0x36, 0x13, 0x12, 0xca, 0xb6, 0x94, 0xc8, 0x48, 0x28, 0x5a, 0xa0, 0x8d,
	0x7a, 0xd8, 0x43, 0xe0, 0x50, 0x55, 0x5c, 0x10, 0x29, 0x55, 0xa4, 0x82, 0x2a, 0x47, 0x70, 0xe1,
	0x50, 0xb9, 0xce, 0xd4, 0xb5, 0x48, 0x77, 0xcd, 0xee, 0x3a, 0x28, 0x37, 0xce, 0xfc, 0x12, 0x7e,
	0x26, 0xf2, 0xda, 0xeb, 0xd8, 0x6d, 0x28, 0xb7, 0xf9, 0x78, 0x6f, 0x76, 0x66, 0xfc, 0xc6, 0xd0,
	0x91, 0x71, 0xc0, 0x62, 0x29, 0xb4, 0xa0, 0xef, 0xa0, 0x7d, 0xca, 0xc3, 0x88, 0x23, 0xd9, 0x87,
	0xf6, 0x55, 0xc4, 0x7d, 0xb9, 0x1a, 0xd4, 0x87, 0xf5, 0x51, 0xc7, 0xcb, 0x3d, 0xe2, 0xc2, 0xb6,
	0xc4, 0x78, 0x11, 0x05, 0xbe, 0x1a, 0x38, 0xc3, 0xc6, 0xa8, 0xe3, 0x15, 0x3e, 0xfd, 0x0a, 0xcd,
	0x29, 0xbf, 0x16, 0x29, 0x77, 0x29, 0x16, 0xc9, 0x2d, 0x5a, 0x6e, 0xe6, 0xa5, 0xdc, 0x6b, 0x29,
	0xb8, 0x46, 0x3e, 0x1f, 0x38, 0x26, 0x53, 0xf8, 0x69, 0x0e, 0xf9, 0x3c, 0x16, 0x11, 0xd7, 0x83,
	0x46, 0x96, 0xb3, 0x3e, 0x75, 0x61, 0x7b, 0x3a, 0x47, 0xae, 0x23, 0xbd, 0x22, 0x7d, 0x70, 0xa6,
	0x93, 0xbc, 0xae, 0x33, 0x9d, 0xd0, 0x03, 0xd8, 0xfe, 0x58, 0xaa, 0x61, 0xed, 0x1c, 0x51, 0xf8,
	0x74, 0x0b, 0x5a, 0xa7, 0xb7, 0xb1, 0x5e, 0x51, 0x0d, 0xdd, 0x0b, 0x29, 0x02, 0x54, 0x6a, 0x16,
	0x63, 0x40, 0x08, 0x34, 0xb9, 0x5f, 0x74, 0x6a, 0xec, 0xd2, 0xec, 0x4e, 0x65, 0x76, 0x02, 0x4d,
	0x5f, 0x86, 0x6a, 0xd0, 0x30, 0x73, 0x1b, 0x9b, 0xbc, 0x86, 0xbe, 0x44, 0x85, 0x72, 0x89, 0xf3,
	0xcb, 0x58, 0x48, 0xad, 0x06, 0xcd, 0x61, 0x63, 0xd4, 0xf2, 0x7a, 0x36, 0x7a, 0x91, 0x06, 0xe9,
	0x04, 0x7a, 0xf6, 0x55, 0xed, 0xeb, 0x44, 0xa5, 0x6f, 0x28, 0x63, 0xd9, 0x1d, 0x65, 0x1e, 0x79,
	0x0e, 0x1d, 0x94, 0x52, 0xc8, 0xcb, 0x5b, 0x15, 0xda, 0x25, 0x99, 0xc0, 0x27, 0x15, 0xd2, 0x63,
	0xd8, 0xcb, 0xab, 0x7c, 0x90, 0xe8, 0x6b, 0xf4, 0xf0, 0x47, 0x82, 0x4a, 0x93, 0x21, 0x34, 0x55,
	0x8c, 0x81, 0x29, 0xd5, 0x1d, 0x3f, 0x62, 0xa5, 0x01, 0x3d, 0x93, 0xa1, 0x47, 0x05, 0x73, 0x82,
	0x0b, 0x5c, 0x33, 0x37, 0x8c, 0x4f, 0x0f, 0xe1, 0x49, 0x8e, 0x3d, 0x43, 0xfd, 0x10, 0xf0, 0x1b,
	0x3c, 0xce, 0x81, 0x1e, 0xaa, 0x58, 0x70, 0x85, 0xff, 0xef, 0x84, 0x1c, 0x14, 0x83, 0x3b, 0x06,
	0xd3, 0x67, 0x95, 0xc5, 0xd8, 0x45, 0xd0, 0x3d, 0x20, 0x79, 0xe2, 0x3c, 0x52, 0xb6, 0x0d, 0xfa,
	0xa7, 0x0e, 0xbb, 0x95, 0x70, 0xfe, 0xee, 0x7b, 0xe8, 0xc4, 0x59, 0x18, 0xd3, 0x8d, 0x36, 0x46,
	0xdd, 0xf1, 0x4b, 0xb6, 0x01, 0x68, 0x63, 0xa8, 0x4e, 0xb9, 0x96, 0x2b, 0x6f, 0xcd, 0x72, 0x3f,
	0x43, 0xbf, 0x9a, 0x24, 0x3b, 0xd0, 0xf8, 0x8e, 0xf6, 0x00, 0x52, 0x93, 0x1c, 0x40, 0x6b, 0xe9,
	0x2f, 0x12, 0xcc, 0x7b, 0xdf, 0x61, 0x77, 0xe6, 0xf7, 0xb2, 0xf4, 0x89, 0x73, 0x5c, 0x1f, 0xff,
	0x72, 0xe0, 0xd9, 0xb9, 0xe0, 0xe1, 0x8d, 0x90, 0xfc, 0xdc, 0x4f, 0x78, 0x70, 0x83, 0x72, 0x86,
	0x72, 0x19, 0x05, 0x48, 0x28, 0xf4, 0xbe, 0xc4, 0xa1, 0xf4, 0xe7, 0x98, 0x9f, 0xdb, 0x16, 0xcb,
	0x0c, 0xb7, 0xcd, 0x32, 0x99, 0xd6, 0x88, 0x0b, 0x5b, 0x67, 0xa8, 0xcd, 0x41, 0xe5, 0x41, 0xb7,
	0xc5, 0x52, 0x97, 0xd6, 0xc8, 0x2b, 0xe8, 0xcd, 0xb4, 0x2f, 0x75, 0x21, 0xfd, 0x0e, 0xb3, 0x17,
	0x52, 0xaa, 0x70, 0x08, 0x3b, 0xb3, 0x9b, 0x44, 0xcf, 0xc5, 0x4f, 0xfe, 0x30, 0xf0, 0x08, 0x76,
	0x4d, 0xb9, 0xac, 0x87, 0x12, 0xd6, 0x9a, 0x15, 0xec, 0xbe, 0x2d, 0x7a, 0x07, 0x6e, 0xbb, 0x2c,
	0xb0, 0xe3, 0xdf, 0x0e, 0xbc, 0xb0, 0x2b, 0xb0, 0x1f, 0xe3, 0xce, 0x26, 0x4e, 0x8a, 0xc3, 0xc8,
	0x24, 0x4d, 0x9e, 0xb2, 0x4d, 0x12, 0x77, 0xef, 0xad, 0x9a, 0xd6, 0x4a, 0xdc, 0x4c, 0xd4, 0x6b,
	0x6e, 0x45, 0xe4, 0x1b, 0xb9, 0x6f, 0x01, 0xd6, 0x22, 0x27, 0x84, 0xdd, 0x53, 0xfc, 0x3f, 0x5e,
	0xec, 0x96, 0x44, 0x45, 0x76, 0xd9, 0x7d, 0x89, 0xba, 0x7b, 0x9b, 0x74, 0x47, 0x6b, 0x57, 0x6d,
	0xf3, 0x8b, 0x7d, 0xf3, 0x37, 0x00, 0x00, 0xff, 0xff, 0xad, 0x32, 0x16, 0x47, 0x6f, 0x05, 0x00,
	0x00,
}
